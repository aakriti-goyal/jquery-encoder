h1. What is jqencoder

jqencoder is a jQuery plugin whose goal is to provide jQuery developers with a means to do contextual output encoding on untrusted data. As applications become more and more reliant on rich client technologies the need for client-side code to have the ability to properly escape untrusted data becomes exponentially more important.

h1. Usage

Using the plugin is very simple, there are both static and instance methods to provide the right type of output encoding for your current situation. The plugin also provides a canonicalization method, which is imperative for detecting attacks that use double or multi encoding when handling data from an untrusted source. If you are dealing with data that may contain encoding, you can first canonicalize that data, then re-encode it for the appropriate context.

<pre lang="ruby">
<script type="text/javascript">
    $.post( 'http://untrusted.com/webservice', { parameter1: 'value' }, function(data) {
        // Data returned may contain encoded data, so canonicalize the data to it's simplest
        // form prior to encoding it for use on the page.
        var cdata = $.canonicalize(data);
        $('#element').encode('html', cdata);
    });
</script>
</pre>

h2. Dependencies
<pre lang="html">
    <script type="text/javascript" src="jquery-min.js"></script>
    <script type="text/javascript" src="Class.create.js"></script>
    <script type="text/javascript" src="jquery-encoding-0.1.0.js"></script>
</pre>

h2. Static Methods

h3. @canonicalize( String data, bool strict=true )@

Canonicalization (also called normalization) is the act of reducing a string to it's simplest form. For example, if the string @%3CB%3E@ is passed into the canonicalize method, the value returned will be decoded into @<b>@. The most important part of this method is that it will detect if a string is passed in that contains either multiple encoding types, or double encoding, or both. The default behavior of the method is to raise an exception if it detects one of these scenarios. As a general rule, normal application operation should never pass data that is either double encoded or encoded using multiple escaping rules. Most definately, data that is provided by a user (such as a form field) will never contain data that fits that description.

<pre lang="ruby">
    try {
        $.canonicalize(untrusted_data);
    } catch (e) {
        log.error(e);
        alert('An error has occured');
    }
</pre>

h3. @encodeForCSS( String input, char[] immune )@

This method allows developers to encode data specifically to be inserted into the @style@ attribute of an element or as the value of a style attribute passed in through the jQuery @.style()@ method.

<pre lang="ruby">
    $.post('/service/userprefs', { user: userID }, function(data) {
        $('#container').html('<div style="background-color: ' + $.encodeForCSS(data['background-color']) + '">');
    });
</pre>

h3. @encodeForHTML( String input )@

This method allows developers to encode data specifically to be inserted between two tags in a document, either through the use of the @html()@ method or by accessing @innerHTML@ directly.

<pre lang="ruby">
    $.post('http://untrusted.com/news/', function(data) {
        $('#element').html( $.encodeForHTML(data) );
    });
</pre>

h3. @encodeForHTMLAttribute( String input, char[] immune )@

h3. @encodeForJavascript( String input, char[] immune )@

h3. @encodeForURL( String input, char[] immune )@

h2. Instance Methods

h3. @encode( Enum(html|css|attr) context, String input )@

h3. @encode( Object opts )@
